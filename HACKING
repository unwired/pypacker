Development process
===================
1) Add new code. See directory examples/ for examples, eg on creating new protocols.
2) For new protocols:
   - Add packet class to one of the layer directories layerXYZ
     - Add reference code from lower to upper (new) layer (see ip.IP.__handler__)
     - Example code: examples/new_protocol.py
   - Tests
     - Add pcap containing example packets to ./tests. Execute all tests, no test must fail.
     - Add tests to tests/test_pypacker.py. Each Packet-class has its own test-class.
3) Quality Assurance via "./switch_setup.sh stable": Improve until no (additional) errors are shown anymore
4) Send PR


pypacker directory structure
============================
pypacker
	examples		# usage examples for pypacker
	pypacker		# pypacker core logic, routines for handling packet-data, protocols sorted by layers
		layer12		# protocols for ISO/OSI-layer 1 and 2. The name of the module
				# is the same as the main class in this module.
		layer3		# ...for layer 3
		layer4		# ...for layer 4
		layer567	# ...for layer 5, 6 and 7
	tests			# tests for pypacker logic and protocols


General Styleguide
==================
- QA rules from qa_config.txt must be applied
- Tabs must be used throughout the code:
- Strings are written using double quotes like "string_xyz"
- Constant names are written in the format [High level: Class/Topic]_[Low level: Descriptive name] like ICMP_ECHO_REPLY (see layer3/icmp.py)
- Avoid overwriting "__getattribute__"
- Readability is more important than performance
